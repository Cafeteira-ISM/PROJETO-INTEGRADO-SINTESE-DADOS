class Livro:
    def __init__(self, titulo, autor, ano_publicacao, total_copias):
        self.titulo = titulo
        self.autor = autor
        self.ano_publicacao = ano_publicacao
        self.total_copias = total_copias
        self.copias_disponiveis = total_copias

    def emprestar(self):
        if self.copias_disponiveis > 0:
            self.copias_disponiveis -= 1
            return True
        else:
            return False

    def devolver(self):
        if self.copias_disponiveis < self.total_copias:
            self.copias_disponiveis += 1
            return True
        else:
            return False

    def __str__(self):
        return f"Título: {self.titulo}, Autor: {self.autor}, Ano: {self.ano_publicacao}, " \
               f"Disponíveis: {self.copias_disponiveis}/{self.total_copias}"

class Usuario:
    def __init__(self, nome, numero_identificacao, contato):
        self.nome = nome
        self.numero_identificacao = numero_identificacao
        self.contato = contato
        self.livros_emprestados = []

    def adicionar_livro_emprestado(self, livro):
        if livro not in self.livros_emprestados:
            self.livros_emprestados.append(livro)
            return True
        return False

    def remover_livro_emprestado(self, livro):
        if livro in self.livros_emprestados:
            self.livros_emprestados.remove(livro)
            return True
        return False

    def __str__(self):
        return f"Nome: {self.nome}, ID: {self.numero_identificacao}, Contato: {self.contato}" \
               f"\nLivros Emprestados: {len(self.livros_emprestados)}"

class Biblioteca:
    def __init__(self):
        self.acervo_livros = {}
        self.lista_usuarios = {}

    def cadastrar_livro(self, titulo, autor, ano_publicacao, total_copias):
        if titulo in self.acervo_livros:
            print(f"Erro: O livro '{titulo}' já está cadastrado na biblioteca.")
            return False
        
        try:
            ano_publicacao = int(ano_publicacao)
            total_copias = int(total_copias)
            if ano_publicacao <= 0 or total_copias <= 0:
                print("Erro: Ano de publicação e número de cópias devem ser maiores que zero.")
                return False
        except ValueError:
            print("Erro: Ano de publicação e número de cópias devem ser números inteiros válidos.")
            return False

        novo_livro = Livro(titulo, autor, ano_publicacao, total_copias)
        self.acervo_livros[titulo] = novo_livro
        print(f"Livro '{titulo}' cadastrado com sucesso!")
        return True

    def cadastrar_usuario(self, nome, numero_identificacao, contato):
        if numero_identificacao in self.lista_usuarios:
            print(f"Erro: O usuário com ID '{numero_identificacao}' já está cadastrado.")
            return False
        
        novo_usuario = Usuario(nome, numero_identificacao, contato)
        self.lista_usuarios[numero_identificacao] = novo_usuario
        print(f"Usuário '{nome}' (ID: {numero_identificacao}) cadastrado com sucesso!")
        return True

    def emprestar_livro(self, id_usuario, titulo_livro):
        usuario = self.lista_usuarios.get(id_usuario)
        livro = self.acervo_livros.get(titulo_livro)

        if not usuario:
            print(f"Erro de Empréstimo: Usuário com ID '{id_usuario}' não encontrado.")
            return False
        
        if not livro:
            print(f"Erro de Empréstimo: Livro '{titulo_livro}' não encontrado no acervo.")
            return False

        if not livro.emprestar():
            print(f"Erro de Empréstimo: Nenhuma cópia de '{titulo_livro}' disponível para empréstimo.")
            return False
        
        if usuario.adicionar_livro_emprestado(livro):
            print(f"Livro '{titulo_livro}' emprestado com sucesso para o usuário '{usuario.nome}'.")
            return True
        else:
            livro.devolver()
            print(f"Erro de Empréstimo: O usuário '{usuario.nome}' já possui este livro emprestado ou houve um problema interno.")
            return False

    def devolver_livro(self, id_usuario, titulo_livro):
        usuario = self.lista_usuarios.get(id_usuario)
        livro = self.acervo_livros.get(titulo_livro)

        if not usuario:
            print(f"Erro de Devolução: Usuário com ID '{id_usuario}' não encontrado.")
            return False
        
        if not livro:
            print(f"Erro de Devolução: Livro '{titulo_livro}' não encontrado no acervo.")
            return False

        if not usuario.remover_livro_emprestado(livro):
            print(f"Erro de Devolução: O livro '{titulo_livro}' não foi encontrado na lista de empréstimos do usuário '{usuario.nome}'.")
            return False
        
        if livro.devolver():
            print(f"Livro '{titulo_livro}' devolvido com sucesso pelo usuário '{usuario.nome}'.")
            return True
        else:
            usuario.adicionar_livro_emprestado(livro)
            print(f"Erro de Devolução: Não foi possível atualizar a contagem de cópias de '{titulo_livro}'.")
            return False

    def consultar_livro(self, criterio, valor):
        encontrados = []
        criterio = criterio.lower()

        if criterio not in ['titulo', 'autor', 'ano']:
            print("Erro de Consulta: Critério de busca inválido. Use 'titulo', 'autor' ou 'ano'.")
            return []

        if criterio == 'titulo':
            if valor in self.acervo_livros:
                encontrados.append(self.acervo_livros[valor])
        else:
            for livro in self.acervo_livros.values():
                if criterio == 'autor':
                    if valor.lower() in livro.autor.lower():
                        encontrados.append(livro)
                elif criterio == 'ano':
                    try:
                        valor_int = int(valor)
                        if livro.ano_publicacao == valor_int:
                            encontrados.append(livro)
                    except ValueError:
                        print("Erro de Consulta: Ano de publicação deve ser um número inteiro válido.")
                        return []

        if encontrados:
            print(f"\n--- Resultados da Consulta por {criterio.capitalize()}: '{valor}' ---")
            for livro in encontrados:
                print(f"- {livro}")
            print("--------------------------------------------------")
        else:
            print(f"Nenhum livro encontrado para {criterio}: '{valor}'.")
        return encontrados

    def gerar_relatorios(self, tipo_relatorio):

        tipo_relatorio = tipo_relatorio.lower()

        print(f"\n--- RELATÓRIO: {tipo_relatorio.upper()} ---")

        if tipo_relatorio == 'disponiveis':
            livros_disponiveis = [livro for livro in self.acervo_livros.values() if livro.copias_disponiveis > 0]
            if livros_disponiveis:
                for livro in livros_disponiveis:
                    print(f"- {livro}")
            else:
                print("Não há livros disponíveis no momento.")
        
        elif tipo_relatorio == 'emprestados':

            livros_emprestados_total = []
            for usuario in self.lista_usuarios.values():
                if usuario.livros_emprestados:
                    print(f"\n--- Livros emprestados por: {usuario.nome} (ID: {usuario.numero_identificacao}) ---")
                    for livro_emprestado in usuario.livros_emprestados:
                        print(f"- {livro_emprestado}")
                    livros_emprestados_total.extend(usuario.livros_emprestados)
            
            if not livros_emprestados_total:
                print("Não há livros emprestados no momento.")

        elif tipo_relatorio == 'usuarios':
            if self.lista_usuarios:
                for usuario in self.lista_usuarios.values():
                    print(f"- {usuario}")
            else:
                print("Nenhum usuário cadastrado.")
        
        else:
            print("Tipo de relatório inválido. Use 'disponiveis', 'emprestados' ou 'usuarios'.")
        
        print("-----------------------------------")

    def exibir_menu(self):

        print("\n--- MENU DA BIBLIOTECA ---")
        print("1. Cadastrar Livro")
        print("2. Cadastrar Usuário")
        print("3. Emprestar Livro")
        print("4. Devolver Livro")
        print("5. Consultar Livros")
        print("6. Gerar Relatórios")
        print("7. Sair")
        print("--------------------------")

    def iniciar(self):
        while True:
            self.exibir_menu()
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                titulo = input("Título do livro: ")
                autor = input("Autor: ")
                ano = input("Ano de Publicação: ")
                copias = input("Número de Cópias: ")
                self.cadastrar_livro(titulo, autor, ano, copias)
            elif opcao == '2':
                nome = input("Nome do usuário: ")
                identificacao = input("Número de Identificação: ")
                contato = input("Contato: ")
                self.cadastrar_usuario(nome, identificacao, contato)
            elif opcao == '3':
                id_usuario = input("ID do Usuário: ")
                titulo_livro = input("Título do Livro: ")
                self.emprestar_livro(id_usuario, titulo_livro)
            elif opcao == '4':
                id_usuario = input("ID do Usuário: ")
                titulo_livro = input("Título do Livro: ")
                self.devolver_livro(id_usuario, titulo_livro)
            elif opcao == '5':
                criterio = input("Consultar por (titulo/autor/ano): ").lower()
                valor = input(f"Digite o {criterio}: ")
                self.consultar_livro(criterio, valor)
            elif opcao == '6':
                tipo = input("Tipo de relatório (disponiveis/emprestados/usuarios): ").lower()
                self.gerar_relatorios(tipo)
            elif opcao == '7':
                print("Saindo do sistema. Até mais!")
                break
            else:
                print("Opção inválida. Por favor, tente novamente.")

if __name__ == "__main__":
    biblioteca = Biblioteca()
    biblioteca.iniciar()